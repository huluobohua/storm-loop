name: Production Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy pylint

      - name: Run linters
        run: |
          ruff check .
          black --check .
          isort --check-only .
          mypy . || true
          pylint **/*.py || true

  # Run tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    strategy:
      matrix:
        test-suite: [unit, integration, e2e]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: storm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/storm_test
          REDIS_URL: redis://localhost:6379/0
          STORM_ENV: test
        run: |
          if [ "${{ matrix.test-suite }}" = "unit" ]; then
            pytest tests/unit -v --cov=storm --cov-report=xml
          elif [ "${{ matrix.test-suite }}" = "integration" ]; then
            pytest tests/integration -v --cov=storm --cov-report=xml
          elif [ "${{ matrix.test-suite }}" = "e2e" ]; then
            pytest tests/e2e -v --cov=storm --cov-report=xml
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy on built image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.storm.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name storm-staging --region us-east-1

      - name: Deploy to Kubernetes
        run: |
          # Update image in deployment
          kubectl set image deployment/storm-app \
            storm-app=${{ needs.build.outputs.image-tag }} \
            -n storm-staging
          
          # Wait for rollout
          kubectl rollout status deployment/storm-app -n storm-staging

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.storm.yourdomain.com/health || exit 1
          curl -f https://staging.storm.yourdomain.com/api/v1/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://storm.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name storm-production --region us-east-1

      - name: Create deployment backup
        run: |
          kubectl get deployment storm-app -n storm-production -o yaml > deployment-backup.yaml
          
      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Create new deployment with new image
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: storm-app-green
            namespace: storm-production
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: storm
                component: app
                version: green
            template:
              metadata:
                labels:
                  app: storm
                  component: app
                  version: green
              spec:
                containers:
                - name: storm-app
                  image: ${{ needs.build.outputs.image-tag }}
                  # ... rest of spec from deployment.yaml
          EOF
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/storm-app-green -n storm-production
          
          # Run health checks on green deployment
          GREEN_POD=$(kubectl get pod -l version=green -n storm-production -o jsonpath="{.items[0].metadata.name}")
          kubectl exec $GREEN_POD -n storm-production -- curl -f http://localhost:8501/health
          
          # Switch service to green deployment
          kubectl patch service storm-service -n storm-production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and monitor
          sleep 60
          
          # If successful, scale down blue deployment
          kubectl scale deployment storm-app --replicas=0 -n storm-production
          
          # Rename green to blue for next deployment
          kubectl delete deployment storm-app -n storm-production
          kubectl patch deployment storm-app-green -n storm-production -p '{"metadata":{"name":"storm-app"}}'

      - name: Verify deployment
        run: |
          # Check all pods are running
          kubectl get pods -n storm-production
          
          # Check endpoints
          curl -f https://storm.yourdomain.com/health || exit 1
          curl -f https://api.storm.yourdomain.com/health || exit 1

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Image: ${{ needs.build.outputs.image-tag }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  monitor-deployment:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Monitor application metrics
        run: |
          # Query Prometheus for key metrics
          # Check error rates, response times, etc.
          echo "Monitoring deployment health..."
          
      - name: Run synthetic monitoring
        run: |
          # Run synthetic user journeys
          # Check critical paths are working
          echo "Running synthetic monitoring..."